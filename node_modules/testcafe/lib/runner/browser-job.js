"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const async_event_emitter_1 = __importDefault(require("../utils/async-event-emitter"));
const test_run_controller_1 = __importDefault(require("./test-run-controller"));
const session_controller_1 = __importDefault(require("../test-run/session-controller"));
const browser_job_result_1 = __importDefault(require("./browser-job-result"));
class BrowserJob extends async_event_emitter_1.default {
    constructor({ tests, browserConnections, proxy, screenshots, warningLog, fixtureHookController, opts, compilerService }) {
        super();
        this._started = false;
        this._total = 0;
        this._passed = 0;
        this._opts = opts;
        this._proxy = proxy;
        this.browserConnections = browserConnections;
        this._screenshots = screenshots;
        this.warningLog = warningLog;
        this.fixtureHookController = fixtureHookController;
        this._result = null;
        this._testRunControllerQueue = tests.map((test, index) => this._createTestRunController(test, index, compilerService));
        this._completionQueue = [];
        this._reportsPending = [];
        this._connectionErrorListener = (error) => this._setResult(browser_job_result_1.default.errored, error);
        this.browserConnections.map(bc => bc.once('error', this._connectionErrorListener));
    }
    _createTestRunController(test, index, compilerService) {
        const testRunController = new test_run_controller_1.default({
            test,
            index: index + 1,
            proxy: this._proxy,
            screenshots: this._screenshots,
            warningLog: this.warningLog,
            fixtureHookController: this.fixtureHookController,
            opts: this._opts,
            compilerService
        });
        testRunController.on('test-run-create', async (testRunInfo) => {
            await this.emit('test-run-create', testRunInfo);
        });
        testRunController.on('test-run-start', async () => {
            await this.emit('test-run-start', testRunController.testRun);
        });
        testRunController.on('test-run-ready', async () => {
            await this.emit('test-run-ready', testRunController);
        });
        testRunController.on('test-run-restart', async () => this._onTestRunRestart(testRunController));
        testRunController.on('test-run-before-done', async () => {
            await this.emit('test-run-before-done', testRunController);
        });
        testRunController.on('test-run-done', async () => this._onTestRunDone(testRunController));
        testRunController.on('test-action-start', async (args) => {
            await this.emit('test-action-start', args);
        });
        testRunController.on('test-action-done', async (args) => {
            await this.emit('test-action-done', args);
        });
        return testRunController;
    }
    async _setResult(status, data) {
        if (this._result)
            return;
        this._result = { status, data };
        this.browserConnections.forEach(bc => bc.removeListener('error', this._connectionErrorListener));
        await Promise.all(this.browserConnections.map(bc => bc.reportJobResult(this._result.status, this._result.data)));
    }
    _addToCompletionQueue(testRunInfo) {
        this._completionQueue.push(testRunInfo);
    }
    _removeFromCompletionQueue(testRunInfo) {
        lodash_1.pull(this._completionQueue, testRunInfo);
    }
    _onTestRunRestart(testRunController) {
        this._removeFromCompletionQueue(testRunController);
        this._testRunControllerQueue.unshift(testRunController);
    }
    async _onTestRunDone(testRunController) {
        this._total++;
        if (!testRunController.testRun.errs.length)
            this._passed++;
        while (this._completionQueue.length && this._completionQueue[0].done) {
            testRunController = this._completionQueue.shift();
            await this.emit('test-run-done', testRunController.testRun);
            lodash_1.pull(this._reportsPending, testRunController);
        }
        if (!this._completionQueue.length && !this.hasQueuedTestRuns) {
            if (!this._opts.live)
                session_controller_1.default.closeSession(testRunController.testRun);
            this
                ._setResult(browser_job_result_1.default.done, { total: this._total, passed: this._passed })
                .then(() => this.emit('done'));
        }
    }
    // API
    get hasQueuedTestRuns() {
        return !!this._testRunControllerQueue.length;
    }
    async popNextTestRunUrl(connection) {
        while (this._testRunControllerQueue.length) {
            // NOTE: before hook for test run fixture is currently
            // executing, so test run is temporary blocked
            const testRunController = this._testRunControllerQueue[0];
            const isBlocked = testRunController.blocked;
            const isConcurrency = this._opts.concurrency > 1;
            const hasIncompleteTestRuns = this._completionQueue.some(controller => !controller.done);
            const needWaitLastTestInFixture = this._reportsPending.some(controller => controller.test.fixture !== testRunController.test.fixture);
            if (isBlocked || (hasIncompleteTestRuns || needWaitLastTestInFixture) && !isConcurrency)
                break;
            this._reportsPending.push(testRunController);
            this._testRunControllerQueue.shift();
            this._addToCompletionQueue(testRunController);
            if (!this._started) {
                this._started = true;
                await this.emit('start');
            }
            const testRunUrl = await testRunController.start(connection);
            if (testRunUrl)
                return testRunUrl;
        }
        return null;
    }
    abort() {
        this.clearListeners();
        this._setResult(browser_job_result_1.default.aborted);
        this.browserConnections.map(bc => bc.removeJob(this));
    }
}
exports.default = BrowserJob;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,