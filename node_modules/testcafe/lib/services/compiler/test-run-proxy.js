"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const prerender_callsite_1 = __importDefault(require("../../utils/prerender-callsite"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const observed_callsites_storage_1 = __importDefault(require("../../test-run/observed-callsites-storage"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
const executor_1 = __importDefault(require("../../assertions/executor"));
const type_1 = __importDefault(require("../../test-run/commands/type"));
const serviceCommands = __importStar(require("../../test-run/commands/service"));
class TestRunProxy {
    constructor({ dispatcher, id, fixtureCtx, options }) {
        this.dispatcher = dispatcher;
        this.id = id;
        this.ctx = Object.create(null);
        this.fixtureCtx = fixtureCtx;
        this._options = options;
        // TODO: Synchronize these properties with their real counterparts in the main process.
        // Postponed until (GH-3244). See details in (GH-5250).
        this.controller = new test_controller_1.default(this);
        this.observedCallsites = new observed_callsites_storage_1.default();
        this.warningLog = new warning_log_1.default();
        this._requestHooks = [];
        test_run_tracker_1.default.activeTestRuns[id] = this;
    }
    _getAssertionTimeout(command) {
        // @ts-ignore
        const { timeout: commandTimeout } = command.options;
        return commandTimeout === void 0
            ? this._options.assertionTimeout
            : commandTimeout;
    }
    async _executeAssertion(command, callsite) {
        const assertionTimeout = this._getAssertionTimeout(command);
        const executor = new executor_1.default(command, assertionTimeout, callsite);
        executor.once('start-assertion-retries', timeout => this.executeCommand(new serviceCommands.ShowAssertionRetriesStatusCommand(timeout)));
        executor.once('end-assertion-retries', success => this.executeCommand(new serviceCommands.HideAssertionRetriesStatusCommand(success)));
        return executor.run();
    }
    getHook(hookId) {
        return this._requestHooks.find(hook => hook.id === hookId);
    }
    async executeAction(apiMethodName, command, callsite) {
        if (callsite)
            callsite = prerender_callsite_1.default(callsite);
        if (command.type === type_1.default.assertion)
            return this._executeAssertion(command, callsite);
        return this.dispatcher.executeAction({ apiMethodName, command, callsite, id: this.id });
    }
    async executeCommand(command) {
        return this.dispatcher.executeCommand({ command, id: this.id });
    }
    initializeRequestHooks(test) {
        this._requestHooks = Array.from(test.requestHooks);
        this._requestHooks.forEach(requestHook => {
            requestHook._warningLog = this.warningLog;
        });
    }
    onRequestHookEvent({ hookId, name, eventData }) {
        const targetHook = this.getHook(hookId);
        // @ts-ignore
        targetHook[name].call(targetHook, eventData);
    }
}
exports.default = TestRunProxy;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,