"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const test_run_1 = require("../../errors/test-run");
class RequestHook {
    constructor(ruleInit, responseEventConfigureOpts) {
        this._requestFilterRules = this._prepareRules(ruleInit);
        this._responseEventConfigureOpts = responseEventConfigureOpts;
        this._warningLog = null;
        this.id = testcafe_hammerhead_1.generateUniqueId();
    }
    _prepareRules(ruleInit) {
        if (Array.isArray(ruleInit) && !ruleInit.length)
            return [];
        const rules = testcafe_hammerhead_1.RequestFilterRule.from(ruleInit);
        return !rules.length ? [testcafe_hammerhead_1.RequestFilterRule.ANY] : rules;
    }
    async onRequest(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onRequest', this.constructor.name);
    }
    async _onConfigureResponse(event) {
        if (!this._responseEventConfigureOpts)
            return;
        event.opts.includeHeaders = this._responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this._responseEventConfigureOpts.includeBody;
    }
    async onResponse(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onResponse', this.constructor.name);
    }
}
exports.default = RequestHook;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBUTZCO0FBRTdCLG9EQUE2RTtBQUk3RSxNQUE4QixXQUFXO0lBTXJDLFlBQXVCLFFBQTBELEVBQUUsMEJBQTBEO1FBQ3pJLElBQUksQ0FBQyxtQkFBbUIsR0FBVyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQywyQkFBMkIsR0FBRywwQkFBMEIsQ0FBQztRQUM5RCxJQUFJLENBQUMsV0FBVyxHQUFtQixJQUFJLENBQUM7UUFDeEMsSUFBSSxDQUFDLEVBQUUsR0FBNEIsc0NBQWdCLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRU8sYUFBYSxDQUFFLFFBQTBEO1FBQzdFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQzNDLE9BQU8sRUFBRSxDQUFDO1FBRWQsTUFBTSxLQUFLLEdBQUcsdUNBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVDQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQUVTLEtBQUssQ0FBQyxTQUFTLENBQUUsS0FBbUI7UUFDMUMsTUFBTSxJQUFJLCtDQUFvQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFTyxLQUFLLENBQUMsb0JBQW9CLENBQUUsS0FBNkI7UUFDN0QsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkI7WUFDakMsT0FBTztRQUVYLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxjQUFjLENBQUM7UUFDNUUsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsQ0FBQztJQUM3RSxDQUFDO0lBRVMsS0FBSyxDQUFDLFVBQVUsQ0FBRSxLQUFvQjtRQUM1QyxNQUFNLElBQUksK0NBQW9DLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBckNELDhCQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29uZmlndXJlUmVzcG9uc2VFdmVudCxcbiAgICBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9ucyxcbiAgICBSZXF1ZXN0RXZlbnQsXG4gICAgUmVzcG9uc2VFdmVudCxcbiAgICBSZXF1ZXN0RmlsdGVyUnVsZSxcbiAgICBSZXF1ZXN0RmlsdGVyUnVsZUluaXQsXG4gICAgZ2VuZXJhdGVVbmlxdWVJZFxufSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcblxuaW1wb3J0IHsgUmVxdWVzdEhvb2tOb3RJbXBsZW1lbnRlZE1ldGhvZEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3Rlc3QtcnVuJztcbmltcG9ydCBXYXJuaW5nTG9nIGZyb20gJy4uLy4uL25vdGlmaWNhdGlvbnMvd2FybmluZy1sb2cnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFJlcXVlc3RIb29rIHtcbiAgICBwdWJsaWMgX3JlcXVlc3RGaWx0ZXJSdWxlczogUmVxdWVzdEZpbHRlclJ1bGVbXTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cz86IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnRPcHRpb25zO1xuICAgIHB1YmxpYyBfd2FybmluZ0xvZzogV2FybmluZ0xvZyB8IG51bGw7XG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IgKHJ1bGVJbml0PzogUmVxdWVzdEZpbHRlclJ1bGVJbml0IHwgUmVxdWVzdEZpbHRlclJ1bGVJbml0W10sIHJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzPzogQ29uZmlndXJlUmVzcG9uc2VFdmVudE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdEZpbHRlclJ1bGVzICAgICAgICAgPSB0aGlzLl9wcmVwYXJlUnVsZXMocnVsZUluaXQpO1xuICAgICAgICB0aGlzLl9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyA9IHJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzO1xuICAgICAgICB0aGlzLl93YXJuaW5nTG9nICAgICAgICAgICAgICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMuaWQgICAgICAgICAgICAgICAgICAgICAgICAgID0gZ2VuZXJhdGVVbmlxdWVJZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3ByZXBhcmVSdWxlcyAocnVsZUluaXQ/OiBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfCBSZXF1ZXN0RmlsdGVyUnVsZUluaXRbXSk6IFJlcXVlc3RGaWx0ZXJSdWxlW10ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlSW5pdCkgJiYgIXJ1bGVJbml0Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCBydWxlcyA9IFJlcXVlc3RGaWx0ZXJSdWxlLmZyb20ocnVsZUluaXQpO1xuXG4gICAgICAgIHJldHVybiAhcnVsZXMubGVuZ3RoID8gW1JlcXVlc3RGaWx0ZXJSdWxlLkFOWV0gOiBydWxlcztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25SZXF1ZXN0IChldmVudDogUmVxdWVzdEV2ZW50KTogUHJvbWlzZTx2b2lkPiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBSZXF1ZXN0SG9va05vdEltcGxlbWVudGVkTWV0aG9kRXJyb3IoJ29uUmVxdWVzdCcsIHRoaXMuY29uc3RydWN0b3IubmFtZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBfb25Db25maWd1cmVSZXNwb25zZSAoZXZlbnQ6IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBldmVudC5vcHRzLmluY2x1ZGVIZWFkZXJzID0gdGhpcy5fcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMuaW5jbHVkZUhlYWRlcnM7XG4gICAgICAgIGV2ZW50Lm9wdHMuaW5jbHVkZUJvZHkgICAgPSB0aGlzLl9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cy5pbmNsdWRlQm9keTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25SZXNwb25zZSAoZXZlbnQ6IFJlc3BvbnNlRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RIb29rTm90SW1wbGVtZW50ZWRNZXRob2RFcnJvcignb25SZXNwb25zZScsIHRoaXMuY29uc3RydWN0b3IubmFtZSk7XG4gICAgfVxufVxuIl19